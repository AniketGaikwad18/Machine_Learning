# -*- coding: utf-8 -*-
"""Power_T.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qNnf97XXpDNFctJOKYxukF3xL929ifgN
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

import scipy.stats as stats

from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score

from sklearn.linear_model import LinearRegression

from sklearn.metrics import r2_score

from sklearn.preprocessing import PowerTransformer

df = pd.read_csv('concrete_data.csv')

df.sample(10)

df.shape

df.isnull().sum()

x = df.drop(columns=['Strength'])
y = df['Strength']

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

lr = LinearRegression()
lr.fit(X_train, y_train)

y_pred = lr.predict(X_test)

r2_score(y_test, y_pred)

for col in X_train.columns:
  plt.figure(figsize=(14, 4))
  plt.subplot(121)
  sns.distplot(X_train[col])
  plt.title(col)

  plt.subplot(122)
  stats.probplot(X_train[col], dist='norm', plot=plt)
  plt.title(col)

  plt.show()

pt = PowerTransformer(method='box-cox')

x_train_transformed = pt.fit_transform(X_train+0.00001)
x_test_transformed = pt.transform(X_test+0.00001)

pd.DataFrame({'cols': X_train.columns, 'box-cox_lambdas': pt.lambdas_})

lr = LinearRegression()
lr.fit(x_train_transformed, y_train)

y_pred = lr.predict(x_test_transformed)

r2_score(y_test, y_pred)

pt = PowerTransformer(method='box-cox')
X_transformed = pt.fit_transform(x+0.00001)

lr = LinearRegression()
np.mean(cross_val_score(lr, X_transformed, y, scoring='r2'))

x_train_transformed2 = pd.DataFrame(x_train_transformed, columns=X_train.columns)


for i, col in enumerate(X_train.columns):
  plt.figure(figsize=(14, 4))
  plt.subplot(121)
  sns.histplot(x_train_transformed[:, i], kde=True)
  plt.title(col)

  plt.subplot(122)
  stats.probplot(x_train_transformed[:, i], dist='norm', plot=plt)
  plt.title(col)

  plt.show()

pt1 = PowerTransformer(method='yeo-johnson')

x_train_transformed2 = pt1.fit_transform(X_train+0.00001)
x_test_transformed2 = pt1.transform(X_test+0.00001)

lr = LinearRegression()
lr.fit(x_train_transformed2, y_train)

y_pred = lr.predict(x_test_transformed2)

r2_score(y_test, y_pred)

pd.DataFrame({'cols': X_train.columns, 'yeo-johnson_lambdas': pt1.lambdas_})

pt =PowerTransformer()
X_transformed = pt.fit_transform(x+0.00001)

lr = LinearRegression()
np.mean(cross_val_score(lr, X_transformed, y, scoring='r2'))

x_train_transformed2 = pd.DataFrame(x_train_transformed2, columns=X_train.columns)

for col in x_train_transformed2.columns:
  plt.figure(figsize=(14, 4))
  plt.subplot(121)
  sns.histplot(x_train_transformed2[col], kde=True)
  plt.title(col)

  plt.subplot(122)
  sns.distplot(x_train_transformed2[col])
  plt.title(col)

  plt.show()

pd.DataFrame({'cols':X_train.columns,'box-cox_lambdas':pt.lambdas_,'Yeo_Johnson_lambdas':pt1.lambdas_})

