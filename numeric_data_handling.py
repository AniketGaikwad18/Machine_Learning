# -*- coding: utf-8 -*-
"""Numeric_Data_Handling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YPumkNEu0YNlAvZODJuDldRNkEPVE15s
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

df = pd.read_csv("titanic_toy.csv")

df.head()

X = df.drop(columns=['Survived'])
y = df['Survived']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

X_train.shape, X_test.shape

X_train.isnull().mean()

mean_age = X_train['Age'].mean()
median_age = X_train['Age'].median()

mean_fare = X_train['Fare'].mean()
median_fare = X_train['Fare'].median()

X_train['Age_median'] = X_train['Age'].fillna(median_age)
X_train['Age_mean'] = X_train['Age'].fillna(mean_age)

X_train['Fare_median'] = X_train['Fare'].fillna(median_fare)
X_train['Fare_mean'] = X_train['Fare'].fillna(mean_fare)

X_train.sample(5)

print('Original Age variable variance: ',X_train['Age'].var())
print('Age_median variable Imputation: ',X_train['Age_median'].var())
print('Age_mean variable Imputation: ',X_train['Age_mean'].var())

print('Original fare variable variance',X_train['Fare'].var())
print('Fare_median variable Imputation',X_train['Fare_median'].var())
print('Fare_mean variable Imputation',X_train['Fare_mean'].var())

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])

#Original variable distribution
X_train['Fare'].plot(kind='kde',ax=ax)

#variable imputed with median
X_train['Fare_median'].plot(kind='kde',ax=ax,color='red')

#variable imputed with mean
X_train['Fare_mean'].plot(kind='kde',ax=ax,color='blue')

#add legends
lines, labels = ax.get_legend_handles_labels()
ax.legend(lines,labels,loc='best')

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])

#Original variable distribution
X_train['Age'].plot(kind='kde',ax=ax)

#variable imputed with median
X_train['Age_median'].plot(kind='kde',ax=ax,color='red')

#variable imputed with mean
X_train['Age_mean'].plot(kind='kde',ax=ax,color='blue')

#add legends
lines, labels = ax.get_legend_handles_labels()
ax.legend(lines,labels,loc='best')

X_train.cov()

X_train[['Age','Age_median','Age_mean']].boxplot()

X_train[['Fare','Fare_median','Fare_mean']].boxplot()

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

impute1 = SimpleImputer(strategy='median')
impute2 = SimpleImputer(strategy='mean')

trf = ColumnTransformer([
    ('impute1',impute1,['Age']),
    ('impute2',impute2,['Fare'])
],remainder='passthrough')

trf.fit(X_train)

trf.named_transformers_['impute1'].statistics_

trf.named_transformers_['impute2']

new_df = pd.read_csv('titanic_toy.csv')

X = new_df.drop(columns=['Survived'])
y =new_df['Survived']

new_df.isnull().mean()

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

"""#USING ARBITARY VALUES"""

X_train['Age_99'] = X_train['Age'].fillna(99)
X_train['Age_minus1'] = X_train['Age'].fillna(-1)

X_train['Fare_99'] = X_train['Fare'].fillna(99)
X_train['Fare_minus1'] = X_train['Fare'].fillna(-1)

print('Original Age variable variance: ',X_train['Age'].var())
print('Age_median variable Imputation: ',X_train['Age_99'].var())
print('Age_mean variable Imputation: ',X_train['Age_minus1'].var())

print('Original fare variable variance',X_train['Fare'].var())
print('Fare_median variable Imputation',X_train['Fare_99'].var())
print('Fare_mean variable Imputation',X_train['Fare_minus1'].var())

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])

#Original variable distribution
X_train['Fare'].plot(kind='kde',ax=ax)

#variable imputed with median
X_train['Fare_99'].plot(kind='kde',ax=ax,color='red')

#variable imputed with mean
X_train['Fare_minus1'].plot(kind='kde',ax=ax,color='blue')

#add legends
lines, labels = ax.get_legend_handles_labels()
ax.legend(lines,labels,loc='best')

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])

#Original variable distribution
X_train['Age'].plot(kind='kde',ax=ax)

#variable imputed with median
X_train['Age_99'].plot(kind='kde',ax=ax,color='red')

#variable imputed with mean
X_train['Age_minus1'].plot(kind='kde',ax=ax,color='blue')

#add legends
lines, labels = ax.get_legend_handles_labels()
ax.legend(lines,labels,loc='best')

